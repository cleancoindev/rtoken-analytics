// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get interestEarned(): BigInt | null {
    let value = this.get("interestEarned");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set interestEarned(value: BigInt | null) {
    if (value === null) {
      this.unset("interestEarned");
    } else {
      this.set("interestEarned", Value.fromBigInt(value as BigInt));
    }
  }

  get recipientsList(): Array<string> {
    let value = this.get("recipientsList");
    return value.toStringArray();
  }

  set recipientsList(value: Array<string>) {
    this.set("recipientsList", Value.fromStringArray(value));
  }

  get interestSourceList(): Array<string> {
    let value = this.get("interestSourceList");
    return value.toStringArray();
  }

  set interestSourceList(value: Array<string>) {
    this.set("interestSourceList", Value.fromStringArray(value));
  }
}

export class Source extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Source entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Source entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Source", id.toString(), this);
  }

  static load(id: string): Source | null {
    return store.get("Source", id) as Source | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timeStarted(): string {
    let value = this.get("timeStarted");
    return value.toString();
  }

  set timeStarted(value: string) {
    this.set("timeStarted", Value.fromString(value));
  }

  get interestRateFloor(): BigInt {
    let value = this.get("interestRateFloor");
    return value.toBigInt();
  }

  set interestRateFloor(value: BigInt) {
    this.set("interestRateFloor", Value.fromBigInt(value));
  }

  get sInternalAmount(): BigInt {
    let value = this.get("sInternalAmount");
    return value.toBigInt();
  }

  set sInternalAmount(value: BigInt) {
    this.set("sInternalAmount", Value.fromBigInt(value));
  }

  get redeemableAmount(): BigInt {
    let value = this.get("redeemableAmount");
    return value.toBigInt();
  }

  set redeemableAmount(value: BigInt) {
    this.set("redeemableAmount", Value.fromBigInt(value));
  }
}
